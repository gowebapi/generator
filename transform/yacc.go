// Code generated by goyacc -o yacc.go -p transform yacc.y. DO NOT EDIT.

//line yacc.y:2
package transform

import __yyfmt__ "fmt"

//line yacc.y:3
import ()

//line yacc.y:13
type transformSymType struct {
	yys     int
	val     string
	ontype  *onType
	action  action
	what    matchType
	section []action
	args    []arg
}

const t_newline = 57346
const t_heading_file = 57347
const t_heading_type = 57348
const t_comment = 57349
const t_ident = 57350
const t_value = 57351
const t_string = 57352
const t_cmd_change_type = 57353
const t_cmd_on = 57354
const t_cmd_patch = 57355
const t_cmd_replace = 57356
const t_cmd_event = 57357
const t_cmd_eventprop = 57358
const t_cmd_addevent = 57359
const t_cmd_notevent = 57360
const t_interface = 57361
const t_enum = 57362
const t_callback = 57363
const t_dictionary = 57364
const t_idlconst = 57365
const t_rawjs = 57366

var transformToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"t_newline",
	"t_heading_file",
	"t_heading_type",
	"t_comment",
	"t_ident",
	"t_value",
	"t_string",
	"t_cmd_change_type",
	"t_cmd_on",
	"t_cmd_patch",
	"t_cmd_replace",
	"t_cmd_event",
	"t_cmd_eventprop",
	"t_cmd_addevent",
	"t_cmd_notevent",
	"t_interface",
	"t_enum",
	"t_callback",
	"t_dictionary",
	"t_idlconst",
	"t_rawjs",
	"'='",
	"','",
	"':'",
	"'.'",
}
var transformStatenames = [...]string{}

const transformEofCode = 1
const transformErrCode = 2
const transformInitialStackSize = 16

//line yacctab:1
var transformExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const transformPrivate = 57344

const transformLast = 86

var transformAct = [...]int{

	20, 10, 52, 73, 13, 15, 74, 59, 7, 36,
	72, 66, 25, 26, 37, 38, 31, 32, 33, 34,
	36, 65, 68, 57, 62, 37, 38, 58, 81, 35,
	46, 47, 48, 49, 11, 12, 79, 63, 53, 51,
	35, 4, 6, 76, 7, 14, 70, 67, 64, 61,
	56, 55, 54, 50, 44, 41, 60, 43, 42, 69,
	9, 8, 2, 16, 1, 71, 5, 45, 75, 24,
	78, 77, 23, 80, 22, 21, 30, 29, 28, 27,
	19, 18, 17, 40, 3, 39,
}
var transformPact = [...]int{

	-1000, -1000, 37, 57, -1000, 56, 25, -1000, -1000, -1000,
	-1000, -1000, -1000, 1, 49, -1000, 54, 53, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46, 11, -1000, -1000, -1000,
	-1000, 45, 30, 44, 43, 42, -2, 4, -21, 52,
	-1000, 41, -1000, -1000, 0, 27, -1000, -1000, -1000, -1000,
	40, -5, -1000, -16, 39, -1000, -3, 25, -1000, 38,
	-1000, -1000, -1000, -17, 30, 30, 35, 30, 25, -1000,
	26, 1, 12, -1000, -5, -1000, -1000, -1000, -1000, 18,
	-1000, -1000,
}
var transformPgo = [...]int{

	0, 63, 1, 85, 84, 83, 82, 81, 80, 0,
	79, 78, 77, 76, 75, 74, 72, 69, 67, 4,
	3, 6, 2, 64, 62, 45,
}
var transformR1 = [...]int{

	0, 23, 24, 24, 24, 25, 25, 19, 19, 19,
	19, 3, 6, 6, 6, 6, 6, 6, 6, 9,
	9, 9, 9, 1, 4, 5, 7, 8, 14, 15,
	16, 17, 20, 20, 21, 21, 22, 18, 18, 18,
	18, 18, 10, 11, 12, 13, 2, 2,
}
var transformR2 = [...]int{

	0, 5, 0, 2, 3, 0, 4, 0, 2, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 3, 5, 4, 2,
	4, 2, 0, 1, 1, 3, 3, 0, 1, 1,
	1, 1, 4, 3, 2, 5, 1, 1,
}
var transformChk = [...]int{

	-1000, -23, -24, -4, 4, -1, 5, 7, 4, 4,
	-2, 9, 10, -19, -25, 4, -1, -6, -7, -8,
	-9, -14, -15, -16, -17, 11, 12, -10, -11, -12,
	-13, 15, 16, 17, 18, 28, 8, 13, 14, -3,
	-5, 6, 4, 4, 8, -18, 19, 20, 21, 22,
	8, -21, -22, 8, 8, 8, 8, 25, 23, 28,
	4, 8, 24, 10, 8, 26, 27, 8, 25, -2,
	8, -19, 27, -20, -21, -22, 8, -20, -2, 10,
	-9, 10,
}
var transformDef = [...]int{

	2, -2, 0, 0, 3, 0, 0, 23, 7, 4,
	24, 46, 47, 5, 1, 8, 0, 0, 12, 13,
	14, 15, 16, 17, 18, 0, 37, 19, 20, 21,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	11, 0, 9, 10, 0, 0, 38, 39, 40, 41,
	0, 29, 34, 0, 0, 31, 0, 0, 44, 0,
	7, 25, 26, 0, 32, 0, 0, 32, 0, 43,
	0, 6, 0, 28, 33, 35, 36, 30, 42, 0,
	27, 45,
}
var transformTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 26, 3, 28, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 27, 3,
	3, 25,
}
var transformTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24,
}
var transformTok3 = [...]int{
	0,
}

var transformErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	transformDebug        = 0
	transformErrorVerbose = false
)

type transformLexer interface {
	Lex(lval *transformSymType) int
	Error(s string)
}

type transformParser interface {
	Parse(transformLexer) int
	Lookahead() int
}

type transformParserImpl struct {
	lval  transformSymType
	stack [transformInitialStackSize]transformSymType
	char  int
}

func (p *transformParserImpl) Lookahead() int {
	return p.char
}

func transformNewParser() transformParser {
	return &transformParserImpl{}
}

const transformFlag = -1000

func transformTokname(c int) string {
	if c >= 1 && c-1 < len(transformToknames) {
		if transformToknames[c-1] != "" {
			return transformToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func transformStatname(s int) string {
	if s >= 0 && s < len(transformStatenames) {
		if transformStatenames[s] != "" {
			return transformStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func transformErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !transformErrorVerbose {
		return "syntax error"
	}

	for _, e := range transformErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + transformTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := transformPact[state]
	for tok := TOKSTART; tok-1 < len(transformToknames); tok++ {
		if n := base + tok; n >= 0 && n < transformLast && transformChk[transformAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if transformDef[state] == -2 {
		i := 0
		for transformExca[i] != -1 || transformExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; transformExca[i] >= 0; i += 2 {
			tok := transformExca[i]
			if tok < TOKSTART || transformExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if transformExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += transformTokname(tok)
	}
	return res
}

func transformlex1(lex transformLexer, lval *transformSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = transformTok1[0]
		goto out
	}
	if char < len(transformTok1) {
		token = transformTok1[char]
		goto out
	}
	if char >= transformPrivate {
		if char < transformPrivate+len(transformTok2) {
			token = transformTok2[char-transformPrivate]
			goto out
		}
	}
	for i := 0; i < len(transformTok3); i += 2 {
		token = transformTok3[i+0]
		if token == char {
			token = transformTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = transformTok2[1] /* unknown char */
	}
	if transformDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", transformTokname(token), uint(char))
	}
	return char, token
}

func transformParse(transformlex transformLexer) int {
	return transformNewParser().Parse(transformlex)
}

func (transformrcvr *transformParserImpl) Parse(transformlex transformLexer) int {
	var transformn int
	var transformVAL transformSymType
	var transformDollar []transformSymType
	_ = transformDollar // silence set and not used
	transformS := transformrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	transformstate := 0
	transformrcvr.char = -1
	transformtoken := -1 // transformrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		transformstate = -1
		transformrcvr.char = -1
		transformtoken = -1
	}()
	transformp := -1
	goto transformstack

ret0:
	return 0

ret1:
	return 1

transformstack:
	/* put a state and value onto the stack */
	if transformDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", transformTokname(transformtoken), transformStatname(transformstate))
	}

	transformp++
	if transformp >= len(transformS) {
		nyys := make([]transformSymType, len(transformS)*2)
		copy(nyys, transformS)
		transformS = nyys
	}
	transformS[transformp] = transformVAL
	transformS[transformp].yys = transformstate

transformnewstate:
	transformn = transformPact[transformstate]
	if transformn <= transformFlag {
		goto transformdefault /* simple state */
	}
	if transformrcvr.char < 0 {
		transformrcvr.char, transformtoken = transformlex1(transformlex, &transformrcvr.lval)
	}
	transformn += transformtoken
	if transformn < 0 || transformn >= transformLast {
		goto transformdefault
	}
	transformn = transformAct[transformn]
	if transformChk[transformn] == transformtoken { /* valid shift */
		transformrcvr.char = -1
		transformtoken = -1
		transformVAL = transformrcvr.lval
		transformstate = transformn
		if Errflag > 0 {
			Errflag--
		}
		goto transformstack
	}

transformdefault:
	/* default state action */
	transformn = transformDef[transformstate]
	if transformn == -2 {
		if transformrcvr.char < 0 {
			transformrcvr.char, transformtoken = transformlex1(transformlex, &transformrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if transformExca[xi+0] == -1 && transformExca[xi+1] == transformstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			transformn = transformExca[xi+0]
			if transformn < 0 || transformn == transformtoken {
				break
			}
		}
		transformn = transformExca[xi+1]
		if transformn < 0 {
			goto ret0
		}
	}
	if transformn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			transformlex.Error(transformErrorMessage(transformstate, transformtoken))
			Nerrs++
			if transformDebug >= 1 {
				__yyfmt__.Printf("%s", transformStatname(transformstate))
				__yyfmt__.Printf(" saw %s\n", transformTokname(transformtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for transformp >= 0 {
				transformn = transformPact[transformS[transformp].yys] + transformErrCode
				if transformn >= 0 && transformn < transformLast {
					transformstate = transformAct[transformn] /* simulate a shift of "error" */
					if transformChk[transformstate] == transformErrCode {
						goto transformstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if transformDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", transformS[transformp].yys)
				}
				transformp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if transformDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", transformTokname(transformtoken))
			}
			if transformtoken == transformEofCode {
				goto ret1
			}
			transformrcvr.char = -1
			transformtoken = -1
			goto transformnewstate /* try again in the same state */
		}
	}

	/* reduction by production transformn */
	if transformDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", transformn, transformStatname(transformstate))
	}

	transformnt := transformn
	transformpt := transformp
	_ = transformpt // guard against "declared and not used"

	transformp -= transformR2[transformn]
	// transformp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if transformp+1 >= len(transformS) {
		nyys := make([]transformSymType, len(transformS)*2)
		copy(nyys, transformS)
		transformS = nyys
	}
	transformVAL = transformS[transformp+1]

	/* consult goto table to find next state */
	transformn = transformR1[transformn]
	transformg := transformPgo[transformn]
	transformj := transformg + transformS[transformp].yys + 1

	if transformj >= transformLast {
		transformstate = transformAct[transformg]
	} else {
		transformstate = transformAct[transformj]
		if transformChk[transformstate] != -transformn {
			transformstate = transformAct[transformg]
		}
	}
	// dummy call; replaced with literal code
	switch transformnt {

	case 1:
		transformDollar = transformS[transformpt-5 : transformpt+1]
//line yacc.y:46
		{
			presult(transformlex).AddFile(transformDollar[2].ontype, transformDollar[4].section)
		}
	case 6:
		transformDollar = transformS[transformpt-4 : transformpt+1]
//line yacc.y:58
		{
			presult(transformlex).AddType(transformDollar[2].ontype, transformDollar[4].section)
		}
	case 7:
		transformDollar = transformS[transformpt-0 : transformpt+1]
//line yacc.y:63
		{
			transformVAL.section = nil
		}
	case 8:
		transformDollar = transformS[transformpt-2 : transformpt+1]
//line yacc.y:64
		{
			transformVAL.section = transformDollar[1].section
		}
	case 9:
		transformDollar = transformS[transformpt-3 : transformpt+1]
//line yacc.y:65
		{
			transformVAL.section = transformDollar[1].section
		}
	case 10:
		transformDollar = transformS[transformpt-3 : transformpt+1]
//line yacc.y:66
		{
			transformVAL.section = append(transformVAL.section, transformDollar[2].action)
		}
	case 11:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:69
		{
			transformVAL.ontype = transformDollar[1].ontype
		}
	case 12:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:72
		{
			transformVAL.action = transformDollar[1].action
		}
	case 13:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:73
		{
			transformVAL.action = transformDollar[1].action
		}
	case 14:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:74
		{
			transformVAL.action = transformDollar[1].action
		}
	case 15:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:75
		{
			transformVAL.action = transformDollar[1].action
		}
	case 16:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:76
		{
			transformVAL.action = transformDollar[1].action
		}
	case 17:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:77
		{
			transformVAL.action = transformDollar[1].action
		}
	case 18:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:78
		{
			transformVAL.action = transformDollar[1].action
		}
	case 19:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:81
		{
			transformVAL.action = transformDollar[1].action
		}
	case 20:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:82
		{
			transformVAL.action = transformDollar[1].action
		}
	case 21:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:83
		{
			transformVAL.action = transformDollar[1].action
		}
	case 22:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:84
		{
			transformVAL.action = transformDollar[1].action
		}
	case 23:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:87
		{
			transformVAL.val = transformDollar[1].val
		}
	case 24:
		transformDollar = transformS[transformpt-2 : transformpt+1]
//line yacc.y:91
		{
			transformVAL.ontype = presult(transformlex).newFileHeader()
		}
	case 25:
		transformDollar = transformS[transformpt-2 : transformpt+1]
//line yacc.y:98
		{
			transformVAL.ontype = presult(transformlex).newTypeHeader(transformDollar[2].val)
		}
	case 26:
		transformDollar = transformS[transformpt-3 : transformpt+1]
//line yacc.y:105
		{
			transformVAL.action = presult(transformlex).newChangeType(transformDollar[2].val, transformDollar[3].val)
		}
	case 27:
		transformDollar = transformS[transformpt-5 : transformpt+1]
//line yacc.y:111
		{
			transformVAL.action = presult(transformlex).newOn(transformDollar[2].what, transformDollar[3].val, transformDollar[5].action)
		}
	case 28:
		transformDollar = transformS[transformpt-4 : transformpt+1]
//line yacc.y:117
		{
			transformVAL.action = presult(transformlex).newEvent(transformDollar[2].val, transformDollar[3].val, transformDollar[4].args)
		}
	case 29:
		transformDollar = transformS[transformpt-2 : transformpt+1]
//line yacc.y:123
		{
			transformVAL.action = presult(transformlex).setEventProp(transformDollar[2].args)
		}
	case 30:
		transformDollar = transformS[transformpt-4 : transformpt+1]
//line yacc.y:129
		{
			transformVAL.action = presult(transformlex).addEvent(transformDollar[2].val, transformDollar[3].val, transformDollar[4].args)
		}
	case 31:
		transformDollar = transformS[transformpt-2 : transformpt+1]
//line yacc.y:135
		{
			transformVAL.action = presult(transformlex).notEvent(transformDollar[2].val)
		}
	case 32:
		transformDollar = transformS[transformpt-0 : transformpt+1]
//line yacc.y:140
		{
			transformVAL.args = nil
		}
	case 33:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:141
		{
			transformVAL.args = transformDollar[1].args
		}
	case 34:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:144
		{
			transformVAL.args = transformDollar[1].args
		}
	case 35:
		transformDollar = transformS[transformpt-3 : transformpt+1]
//line yacc.y:145
		{
			transformVAL.args = append(transformDollar[1].args, transformDollar[3].args...)
		}
	case 36:
		transformDollar = transformS[transformpt-3 : transformpt+1]
//line yacc.y:149
		{
			transformVAL.args = presult(transformlex).newArgumentIdent(transformDollar[1].val, transformDollar[3].val)
		}
	case 37:
		transformDollar = transformS[transformpt-0 : transformpt+1]
//line yacc.y:154
		{
			transformVAL.what = matchAll
		}
	case 38:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:155
		{
			transformVAL.what = matchInterface
		}
	case 39:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:156
		{
			transformVAL.what = matchEnum
		}
	case 40:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:157
		{
			transformVAL.what = matchCallback
		}
	case 41:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:158
		{
			transformVAL.what = matchDictionary
		}
	case 42:
		transformDollar = transformS[transformpt-4 : transformpt+1]
//line yacc.y:162
		{
			transformVAL.action = presult(transformlex).newProperty(transformDollar[2].val, transformDollar[4].val)
		}
	case 43:
		transformDollar = transformS[transformpt-3 : transformpt+1]
//line yacc.y:168
		{
			transformVAL.action = presult(transformlex).newRename(transformDollar[1].val, transformDollar[3].val)
		}
	case 44:
		transformDollar = transformS[transformpt-2 : transformpt+1]
//line yacc.y:174
		{
			transformVAL.action = presult(transformlex).newPatchIdlConst()
		}
	case 45:
		transformDollar = transformS[transformpt-5 : transformpt+1]
//line yacc.y:180
		{
			transformVAL.action = presult(transformlex).newReplace(transformDollar[3].val, transformDollar[4].val, transformDollar[5].val)
		}
	case 46:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:185
		{
			transformVAL.val = transformDollar[1].val
		}
	case 47:
		transformDollar = transformS[transformpt-1 : transformpt+1]
//line yacc.y:186
		{
			transformVAL.val = transformDollar[1].val
		}
	}
	goto transformstack /* stack new state and value */
}
