// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package iface

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
)

// using following types:

// source idl files:
// iface.idl

// transform files:
//

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// class: Foo
type Foo struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Foo) JSValue() js.Value {
	return _this.Value_JS
}

// FooFromJS is casting a js.Value into Foo.
func FooFromJS(value js.Value) *Foo {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Foo{}
	ret.Value_JS = value
	return ret
}

// FooFromJS is casting from something that holds a js.Value into Foo.
func FooFromWrapper(input core.Wrapper) *Foo {
	return FooFromJS(input.JSValue())
}

// Test4 returning attribute 'test4' with
// type Any (idl: any).
func Test4() js.Value {
	var ret js.Value
	_klass := js.Global().Get("Foo")
	value := _klass.Get("test4")
	ret = value
	return ret
}

// Test4 returning attribute 'test4' with
// type Any (idl: any).
func SetTest4(value interface{}) {
	_klass := js.Global().Get("Foo")
	input := value
	_klass.Set("test4", input)
}

func Test2(a interface{}, b ...interface{}) (_result js.Value) {
	_klass := js.Global().Get("Foo")
	_method := _klass.Get("test2")
	var (
		_args []interface{} = make([]interface{}, 1+len(b))
		_end  int
	)
	_p0 := a
	_args[0] = _p0
	_end++
	for _, __in := range b {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

// Test3 returning attribute 'test3' with
// type Any (idl: any).
func (_this *Foo) Test3() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("test3")
	ret = value
	return ret
}

// SetTest3 setting attribute 'test3' with
// type Any (idl: any).
func (_this *Foo) SetTest3(value interface{}) {
	input := value
	_this.Value_JS.Set("test3", input)
}

func (_this *Foo) Test1(a interface{}, b ...interface{}) (_result js.Value) {
	var (
		_args []interface{} = make([]interface{}, 1+len(b))
		_end  int
	)
	_p0 := a
	_args[0] = _p0
	_end++
	for _, __in := range b {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("test1", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

// class: Foo2
type Foo2 struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Foo2) JSValue() js.Value {
	return _this.Value_JS
}

// Foo2FromJS is casting a js.Value into Foo2.
func Foo2FromJS(value js.Value) *Foo2 {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Foo2{}
	ret.Value_JS = value
	return ret
}

// Foo2FromJS is casting from something that holds a js.Value into Foo2.
func Foo2FromWrapper(input core.Wrapper) *Foo2 {
	return Foo2FromJS(input.JSValue())
}

// Test7 returning attribute 'test7' with
// type []int (idl: sequence<long>).
func Test7() []int {
	var ret []int
	_klass := js.Global().Get("Foo2")
	value := _klass.Get("test7")
	__length0 := value.Length()
	__array0 := make([]int, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 int
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = (__seq_in0).Int()
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// Test7 returning attribute 'test7' with
// type []int (idl: sequence<long>).
func SetTest7(value []int) {
	_klass := js.Global().Get("Foo2")
	input := js.Global().Get("Array").New(len(value))
	for __idx0, __seq_in0 := range value {
		__seq_out0 := __seq_in0
		input.SetIndex(__idx0, __seq_out0)
	}
	_klass.Set("test7", input)
}

func Test6(a []int, b ...[]int) (_result []int) {
	_klass := js.Global().Get("Foo2")
	_method := _klass.Get("test6")
	var (
		_args []interface{} = make([]interface{}, 1+len(b))
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(a))
	for __idx0, __seq_in0 := range a {
		__seq_out0 := __seq_in0
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	for _, __in := range b {
		__out := js.Global().Get("Array").New(len(__in))
		for __idx2, __seq_in2 := range __in {
			__seq_out2 := __seq_in2
			__out.SetIndex(__idx2, __seq_out2)
		}
		_args[_end] = __out
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted []int // javascript: sequence<long> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]int, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 int
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = (__seq_in0).Int()
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// Test3 returning attribute 'test3' with
// type []int (idl: sequence<long>).
func (_this *Foo2) Test3() []int {
	var ret []int
	value := _this.Value_JS.Get("test3")
	__length0 := value.Length()
	__array0 := make([]int, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 int
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = (__seq_in0).Int()
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// SetTest3 setting attribute 'test3' with
// type []int (idl: sequence<long>).
func (_this *Foo2) SetTest3(value []int) {
	input := js.Global().Get("Array").New(len(value))
	for __idx0, __seq_in0 := range value {
		__seq_out0 := __seq_in0
		input.SetIndex(__idx0, __seq_out0)
	}
	_this.Value_JS.Set("test3", input)
}

func (_this *Foo2) Test1(a []int, b ...[]int) (_result []int) {
	var (
		_args []interface{} = make([]interface{}, 1+len(b))
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(a))
	for __idx0, __seq_in0 := range a {
		__seq_out0 := __seq_in0
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	for _, __in := range b {
		__out := js.Global().Get("Array").New(len(__in))
		for __idx2, __seq_in2 := range __in {
			__seq_out2 := __seq_in2
			__out.SetIndex(__idx2, __seq_out2)
		}
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("test1", _args[0:_end]...)
	var (
		_converted []int // javascript: sequence<long> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]int, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 int
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = (__seq_in0).Int()
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// class: Foo3
type Foo3 struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Foo3) JSValue() js.Value {
	return _this.Value_JS
}

// Foo3FromJS is casting a js.Value into Foo3.
func Foo3FromJS(value js.Value) *Foo3 {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Foo3{}
	ret.Value_JS = value
	return ret
}

// Foo3FromJS is casting from something that holds a js.Value into Foo3.
func Foo3FromWrapper(input core.Wrapper) *Foo3 {
	return Foo3FromJS(input.JSValue())
}

// Test9 returning attribute 'test9' with
// type []Any (idl: sequence<any>).
func Test9() []js.Value {
	var ret []js.Value
	_klass := js.Global().Get("Foo3")
	value := _klass.Get("test9")
	__length0 := value.Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// Test9 returning attribute 'test9' with
// type []Any (idl: sequence<any>).
func SetTest9(value []interface{}) {
	_klass := js.Global().Get("Foo3")
	input := js.Global().Get("Array").New(len(value))
	for __idx0, __seq_in0 := range value {
		__seq_out0 := __seq_in0
		input.SetIndex(__idx0, __seq_out0)
	}
	_klass.Set("test9", input)
}

func Test8(a []interface{}, b ...[]interface{}) (_result []js.Value) {
	_klass := js.Global().Get("Foo3")
	_method := _klass.Get("test8")
	var (
		_args []interface{} = make([]interface{}, 1+len(b))
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(a))
	for __idx0, __seq_in0 := range a {
		__seq_out0 := __seq_in0
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	for _, __in := range b {
		__out := js.Global().Get("Array").New(len(__in))
		for __idx2, __seq_in2 := range __in {
			__seq_out2 := __seq_in2
			__out.SetIndex(__idx2, __seq_out2)
		}
		_args[_end] = __out
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted []js.Value // javascript: sequence<any> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// Test3 returning attribute 'test3' with
// type []Any (idl: sequence<any>).
func (_this *Foo3) Test3() []js.Value {
	var ret []js.Value
	value := _this.Value_JS.Get("test3")
	__length0 := value.Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// SetTest3 setting attribute 'test3' with
// type []Any (idl: sequence<any>).
func (_this *Foo3) SetTest3(value []interface{}) {
	input := js.Global().Get("Array").New(len(value))
	for __idx0, __seq_in0 := range value {
		__seq_out0 := __seq_in0
		input.SetIndex(__idx0, __seq_out0)
	}
	_this.Value_JS.Set("test3", input)
}

func (_this *Foo3) Test1(a []interface{}, b ...[]interface{}) (_result []js.Value) {
	var (
		_args []interface{} = make([]interface{}, 1+len(b))
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(a))
	for __idx0, __seq_in0 := range a {
		__seq_out0 := __seq_in0
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	for _, __in := range b {
		__out := js.Global().Get("Array").New(len(__in))
		for __idx2, __seq_in2 := range __in {
			__seq_out2 := __seq_in2
			__out.SetIndex(__idx2, __seq_out2)
		}
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("test1", _args[0:_end]...)
	var (
		_converted []js.Value // javascript: sequence<any> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}
