// Code generated by webidlgenerator. DO NOT EDIT.

// +build !js

package callback

import js "github.com/gowebapi/webapi/core/failjs"

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// callback: Test1
type Test1 func()

func Test1ToJS(callback Test1) *js.Callback {
	if callback == nil {
		return nil
	}
	ret := js.NewCallback(func(args []js.Value) {
		var ()
		// TODO: return value
		callback()
	})
	return &ret
}

func Test1FromJS(_value js.Value) Test1 {
	return func() {
		var (
			_args [0]interface{}
			_end  int
		)
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: Test2
type Test2 func(a int, b string)

func Test2ToJS(callback Test2) *js.Callback {
	if callback == nil {
		return nil
	}
	ret := js.NewCallback(func(args []js.Value) {
		var (
			_p0 int    // javascript: long a
			_p1 string // javascript: DOMString b
		)
		_p0 = (args[0]).Int()
		_p1 = (args[1]).String()
		// TODO: return value
		callback(_p0, _p1)
	})
	return &ret
}

func Test2FromJS(_value js.Value) Test2 {
	return func(a int, b string) {
		var (
			_args [2]interface{}
			_end  int
		)
		_p0 := a
		_args[0] = _p0
		_end++
		_p1 := b
		_args[1] = _p1
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: Test3
type Test3 func(a int, b string) int

func Test3ToJS(callback Test3) *js.Callback {
	if callback == nil {
		return nil
	}
	ret := js.NewCallback(func(args []js.Value) {
		var (
			_p0 int    // javascript: long a
			_p1 string // javascript: DOMString b
		)
		_p0 = (args[0]).Int()
		_p1 = (args[1]).String()
		// TODO: return value
		callback(_p0, _p1)
	})
	return &ret
}

func Test3FromJS(_value js.Value) Test3 {
	return func(a int, b string) (_result int) {
		var (
			_args [2]interface{}
			_end  int
		)
		_p0 := a
		_args[0] = _p0
		_end++
		_p1 := b
		_args[1] = _p1
		_end++
		_returned := _value.Invoke(_args[0:_end]...)
		var (
			_converted int // javascript: long
		)
		_converted = (_returned).Int()
		_result = _converted
		return
	}
}

// callback: Test4
type Test4 func(a *Foo) *Foo

func Test4ToJS(callback Test4) *js.Callback {
	if callback == nil {
		return nil
	}
	ret := js.NewCallback(func(args []js.Value) {
		var (
			_p0 *Foo // javascript: Foo a
		)
		_p0 = FooFromJS(args[0])
		// TODO: return value
		callback(_p0)
	})
	return &ret
}

func Test4FromJS(_value js.Value) Test4 {
	return func(a *Foo) (_result *Foo) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := a.JSValue()
		_args[0] = _p0
		_end++
		_returned := _value.Invoke(_args[0:_end]...)
		var (
			_converted *Foo // javascript: Foo
		)
		_converted = FooFromJS(_returned)
		_result = _converted
		return
	}
}

// callback: Test5
type Test5 func(a *Foo, b *Bar, c *Bar) *Bar

func Test5ToJS(callback Test5) *js.Callback {
	if callback == nil {
		return nil
	}
	ret := js.NewCallback(func(args []js.Value) {
		var (
			_p0 *Foo // javascript: Foo a
			_p1 *Bar // javascript: Bar b
			_p2 *Bar // javascript: Bar c
		)
		_p0 = FooFromJS(args[0])
		_p1 = BarFromJS(args[1])
		_p2 = BarFromJS(args[2])
		// TODO: return value
		callback(_p0, _p1, _p2)
	})
	return &ret
}

func Test5FromJS(_value js.Value) Test5 {
	return func(a *Foo, b *Bar, c *Bar) (_result *Bar) {
		var (
			_args [3]interface{}
			_end  int
		)
		_p0 := a.JSValue()
		_args[0] = _p0
		_end++
		_p1 := b.JSValue()
		_args[1] = _p1
		_end++
		_p2 := c.JSValue()
		_args[2] = _p2
		_end++
		_returned := _value.Invoke(_args[0:_end]...)
		var (
			_converted *Bar // javascript: Bar
		)
		_converted = BarFromJS(_returned)
		_result = _converted
		return
	}
}

// dictionary: Bar
type Bar struct {
	A int
	B int
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *Bar) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.A
	out.Set("a", value0)
	value1 := _this.B
	out.Set("b", value1)
	return out
}

// BarFromJS is allocating a new
// Bar object and copy all values from
// input javascript object
func BarFromJS(input js.Value) *Bar {
	var out Bar
	var (
		out0 int // javascript: long {a A a}
		out1 int // javascript: long {b B b}
	)
	out0 = (input.Get("a")).Int()
	out.A = out0
	out1 = (input.Get("b")).Int()
	out.B = out1
	return &out
}

// interface: Foo
type Foo struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Foo) JSValue() js.Value {
	return _this.Value_JS
}

// FooFromJS is casting a js.Value into Foo.
func FooFromJS(input js.Value) *Foo {
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Foo{}
	ret.Value_JS = input
	return ret
}

// Test1 returning attribute 'test1' with
// type Test1 (idl: Test1).
func (_this *Foo) Test1() Test1 {
	var ret Test1
	value := _this.Value_JS.Get("test1")
	ret = Test1FromJS(value)
	return ret
}

// SetTest1 setting attribute 'test1' with
// type Test1 (idl: Test1).
func (_this *Foo) SetTest1(value *js.Callback) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("test1", input)
}

// Test2 returning attribute 'test2' with
// type Test2 (idl: Test2).
func (_this *Foo) Test2() Test2 {
	var ret Test2
	value := _this.Value_JS.Get("test2")
	ret = Test2FromJS(value)
	return ret
}

// SetTest2 setting attribute 'test2' with
// type Test2 (idl: Test2).
func (_this *Foo) SetTest2(value *js.Callback) {
	var __callback1 js.Value
	if value != nil {
		__callback1 = (*value).Value
	} else {
		__callback1 = js.Null()
	}
	input := __callback1
	_this.Value_JS.Set("test2", input)
}

// Test3 returning attribute 'test3' with
// type Test3 (idl: Test3).
func (_this *Foo) Test3() Test3 {
	var ret Test3
	value := _this.Value_JS.Get("test3")
	ret = Test3FromJS(value)
	return ret
}

// SetTest3 setting attribute 'test3' with
// type Test3 (idl: Test3).
func (_this *Foo) SetTest3(value *js.Callback) {
	var __callback2 js.Value
	if value != nil {
		__callback2 = (*value).Value
	} else {
		__callback2 = js.Null()
	}
	input := __callback2
	_this.Value_JS.Set("test3", input)
}

// Test4 returning attribute 'test4' with
// type Test4 (idl: Test4).
func (_this *Foo) Test4() Test4 {
	var ret Test4
	value := _this.Value_JS.Get("test4")
	ret = Test4FromJS(value)
	return ret
}

// SetTest4 setting attribute 'test4' with
// type Test4 (idl: Test4).
func (_this *Foo) SetTest4(value *js.Callback) {
	var __callback3 js.Value
	if value != nil {
		__callback3 = (*value).Value
	} else {
		__callback3 = js.Null()
	}
	input := __callback3
	_this.Value_JS.Set("test4", input)
}

// Test5 returning attribute 'test5' with
// type Test5 (idl: Test5).
func (_this *Foo) Test5() Test5 {
	var ret Test5
	value := _this.Value_JS.Get("test5")
	ret = Test5FromJS(value)
	return ret
}

// SetTest5 setting attribute 'test5' with
// type Test5 (idl: Test5).
func (_this *Foo) SetTest5(value *js.Callback) {
	var __callback4 js.Value
	if value != nil {
		__callback4 = (*value).Value
	} else {
		__callback4 = js.Null()
	}
	input := __callback4
	_this.Value_JS.Set("test5", input)
}
